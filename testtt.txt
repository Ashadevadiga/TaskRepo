import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.index.IssueIndexingService

def searchService = ComponentAccessor.getComponentOfType(SearchService)
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser
 
def eventIssue = event.issue
 
 def indexManager = ComponentAccessor.getComponent(IssueIndexingService)
 
if (eventIssue) {
    def parent = eventIssue.getParentObject()
    
    if (parent) {
        // Handle Epic Issue
        def parentIssueKey = parent.getKey()
 
        // Step 1: Search for all issues linked to the Epic (assuming "Epic Link" is the link)
        def filter = "\"Parent Link\" = $parentIssueKey"
        SearchService.ParseResult parseResult = searchService.parseQuery(user, filter)
        def results = searchService.search(user, parseResult.query, PagerFilter.unlimitedFilter)
        def issues = results.results
 
        log.warn("Total issues linked to $parentIssueKey: " + issues.size())
 
        // Step 2: Calculate the average value of a custom field on linked child issues
        def customFieldId = "customfield_13111" // Replace with your actual custom field ID
        def totalCustomFieldValue = 0
        def numberOfChildIssues = issues.size()
 
        issues.each { issue ->
            def customField = ComponentAccessor.customFieldManager.getCustomFieldObject(customFieldId)
            def childIssueValue = issue.getCustomFieldValue(customField) ?: 0
 
            // Convert childIssueValue to a numeric type
            def numericValue = childIssueValue as Number ?: 0
 
            totalCustomFieldValue += numericValue
        }
 
        def averageCustomFieldValue = numberOfChildIssues > 0 ? totalCustomFieldValue / numberOfChildIssues : 0
 
        // Step 3: Update the Epic issue's custom field with the calculated average value
        def epicIssue = ComponentAccessor.issueManager.getIssueByCurrentKey(parentIssueKey)
 
        if (epicIssue) {
            def epicCustomField = ComponentAccessor.customFieldManager.getCustomFieldObject(customFieldId)
 
            // Create a ModifiedValue and update the custom field value
            def modifiedValue = new ModifiedValue(epicIssue.getCustomFieldValue(epicCustomField), averageCustomFieldValue)
            epicCustomField.updateValue(null, epicIssue, modifiedValue, new DefaultIssueChangeHolder())
            indexManager.reIndex(epicIssue)
            log.warn("Updated Custom Field on Epic $parentIssueKey to: " + averageCustomFieldValue)
        } else {
            log.warn("Epic issue $parentIssueKey not found.")
        }
    }
} else {
    log.warn("The event issue is null.")
}















import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.web.bean.PagerFilter

def searchService = ComponentAccessor.getComponentOfType(SearchService)
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser

def eventIssue = event.issue

if (eventIssue) {
    def epic = eventIssue.getEpic()
    
    if (epic) {
        // Handle Epic Issue
        
        def epicIssueKey = epic.getKey()

        // Step 1: Search for all issues linked to the Epic (LTI-9)
        def filter = "\"Epic Link\" = $epicIssueKey"
        SearchService.ParseResult parseResult = searchService.parseQuery(user, filter)
        def results = searchService.search(user, parseResult.query, PagerFilter.unlimitedFilter)
        def issues = results.results

        log.warn("Total issues linked to $epicIssueKey: " + issues.size())

        // Step 2: Calculate the total time spent, estimate, and original estimate on linked issues
        def totalSpentTime = 0
        def totalEstimate = 0
        def totalOriginalEstimate = 0

        issues.each { issue ->
            def issueKey = issue.key
            def timeSpent = issue.getTimeSpent() ?: 0
            def estimate = issue.getEstimate() ?: 0
            def originalEstimate = issue.getOriginalEstimate() ?: 0
            
            totalSpentTime += timeSpent
            totalEstimate += estimate
            totalOriginalEstimate += originalEstimate

            log.warn("Issue Key: " + issueKey)
            log.warn("Time Spent on $issueKey: " + timeSpent)
            log.warn("Estimate on $issueKey: " + estimate)
            log.warn("Original Estimate on $issueKey: " + originalEstimate)
        }

        // Step 3: Update the Epic issue's fields with the calculated totals
        def epicIssue = ComponentAccessor.issueManager.getIssueByCurrentKey(epicIssueKey)

        if (epicIssue) {
            epicIssue.setTimeSpent(totalSpentTime)
            epicIssue.setEstimate(totalEstimate)
            epicIssue.setOriginalEstimate(totalOriginalEstimate)
            epicIssue.store() // Save the updated Epic issue
            log.warn("Updated Time Spent on Epic $epicIssueKey to: " + totalSpentTime)
            log.warn("Updated Estimate on Epic $epicIssueKey to: " + totalEstimate)
            log.warn("Updated Original Estimate on Epic $epicIssueKey to: " + totalOriginalEstimate)
        } else {
            log.warn("Epic issue $epicIssueKey not found.")
        }
    } 
} else {
    log.warn("The event issue is null.")
}









UPDATE jiraaction SET actionbody = replace(actionbody, 'accountid:5cff5ae1d04ff50bbf712f1c', 'rk:81bd152f-ba28-424c-af7f-e097de17bff3') WHERE actionbody LIKE '%[accountid:5cff5ae1d04ff50bbf712f1c]%'; == User mangenent update query
 
psql -h 10.236.178.27 -p 5432  -d wavejira4 -U udl_admin -f  Fixing-cwd_user_202107151222.sql ===> command
 
UPDATE jiraaction SET actionbody = replace(actionbody, 'https://abc.atlassian.net/browse/', 'https://xyz.com:8443/browse/') WHERE actionbody LIKE '%https://abc.atlassian.net/browse/%'; ==> Update the soure link to target in comments
 
UPDATE jiraissue SET description = replace(description, 'https://abc.atlassian.net/browse/', 'https://xyz.com/browse/') WHERE description LIKE '%https://abc.atlassian.net/browse/%';   ==> Update the soure link to target in Description


























import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.atlassian.jira.web.bean.PagerFilter

 
def searchService = ComponentAccessor.getComponentOfType(SearchService)
def user = ComponentAccessor.jiraAuthenticationContext.loggedInUser
 
def eventIssue = event.issue
log.warn(eventIssue)
def indexManager = ComponentAccessor.getComponent(IssueIndexingService)
 
if (eventIssue) {
    def customFieldManger = ComponentAccessor.getCustomFieldManager();
    def cf = customFieldManger.getCustomFieldObject("customfield_10201")
    def epic = eventIssue.getCustomFieldValue(cf)
 
    if (epic) {
        // Handle Epic Issue
        def epicIssueKey = epic.getKey()
		log.warn(epicIssueKey)
 
        // Step 1: Search for all issues linked to the Epic (assuming "Epic Link" is the link)
        def filter = "\"Parent Link\" = $epicIssueKey"
        SearchService.ParseResult parseResult = searchService.parseQuery(user, filter)
        def results = searchService.search(user, parseResult.query, PagerFilter.unlimitedFilter)
        def issues = results.results
 
        log.warn("Total issues linked to $epicIssueKey: " + issues.size())
 
        // Step 2: Find the earliest start date and latest end date among linked child issues
        def startDateFieldId = "customfield_25423" // Replace with your actual start date field ID
        def endDateFieldId = "customfield_25424" // Replace with your actual end date field ID
		def Targetstart = "customfield_10202"
		def TargetEnd = "customfield_10203" 
		
 
        def earliestStartDate = null
        def latestEndDate = null
		def endstart = null
		def endtarget = null
		
 
        issues.each { issue ->
            def startDateField = ComponentAccessor.customFieldManager.getCustomFieldObject(startDateFieldId)
            def endDateField = ComponentAccessor.customFieldManager.getCustomFieldObject(endDateFieldId)
			def Targetstartdate = ComponentAccessor.customFieldManager.getCustomFieldObject(Targetstart)
			def TargetEnddate = ComponentAccessor.customFieldManager.getCustomFieldObject(TargetEnd)
            
 
            def childStartDate = issue.getCustomFieldValue(startDateField)
            def childEndDate = issue.getCustomFieldValue(endDateField)
			def childtargetstart = issue.getCustomFieldValue(Targetstartdate)
			def childtargetend = issue.getCustomFieldValue(TargetEnddate)
 
            if (childStartDate && childStartDate instanceof Date) {
                if (earliestStartDate == null || childStartDate.before(earliestStartDate)) {
                    earliestStartDate = childStartDate
                }
            }
 
            if (childEndDate && childEndDate instanceof Date) {
                if (latestEndDate == null || childEndDate.after(latestEndDate)) {
                    latestEndDate = childEndDate
                }
            }
			
			if (childtargetstart && childtargetstart instanceof Date) {
                if (endstart == null || childtargetstart.before(endstart)) {
                    endstart = childtargetstart
                }
            }
			
			if (childtargetend && childtargetend instanceof Date) {
                if (endtarget == null || childtargetend.after(endtarget)) {
                    endtarget = childtargetend
                }
            }
        }
       log.warn(earliestStartDate)
       log.warn(latestEndDate)
	   log.warn(endstart)
	   log.warn(endtarget)
        // Step 3: Update the Epic issue's start and end date fields
        def epicIssue = ComponentAccessor.issueManager.getIssueByCurrentKey(epicIssueKey)
        log.warn(epicIssueKey)
 
        if (epicIssue) {
            def epicStartDateField = ComponentAccessor.customFieldManager.getCustomFieldObject("customfield_25423") // Replace with your actual epic start date field ID
            def epicEndDateField = ComponentAccessor.customFieldManager.getCustomFieldObject("customfield_25424") // Replace with your actual epic end date field ID
			def epicTargetstart = ComponentAccessor.customFieldManager.getCustomFieldObject("customfield_10202")
			def epicTargetend = ComponentAccessor.customFieldManager.getCustomFieldObject("customfield_10203")
			
 
            if (epicStartDateField && epicEndDateField && epicTargetstart && epicEndDateField) {
                epicStartDateField.updateValue(null, epicIssue, new ModifiedValue(epicIssue.getCustomFieldValue(epicStartDateField), earliestStartDate), new DefaultIssueChangeHolder())
                epicEndDateField.updateValue(null, epicIssue, new ModifiedValue(epicIssue.getCustomFieldValue(epicEndDateField), latestEndDate), new DefaultIssueChangeHolder())
				epicTargetstart.updateValue(null, epicIssue, new ModifiedValue(epicIssue.getCustomFieldValue(epicTargetstart), endstart), new DefaultIssueChangeHolder())
				epicTargetend.updateValue(null, epicIssue, new ModifiedValue(epicIssue.getCustomFieldValue(epicTargetend), endtarget), new DefaultIssueChangeHolder())
            }
            indexManager.reIndex(epicIssue)
            log.warn("Updated Start and End Date Fields on Epic $epicIssueKey.")
        } else {
            log.warn("Epic issue $epicIssueKey not found.")
        }
    }
} 
else {
    log.warn("The event issue is null.")
}

